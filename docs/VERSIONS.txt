VERSIONS
----------

Some versions are only included for history purposes (within () ).

(V0.5
 * Added parameter prefix -o <path> that gives the user ability to choose his own output directory
 * Added required parameter -r that is integers denoting the mean read length
 * Added optional parameter -s that lets you specify the standard deviation of the library (one for each library). If specified, the gap size is calculated with a sophisticated formula. Else, it's calculated naively.
 * Added output of a gff version 3 file
 * Added so -t parameter chan take different values for diff. libraries)
 

V0.6
 BUG FIXES
 * fixed bug in -e parameter, before some special cases when e < parameter_value could still be included in graph and final scaffolding step. Now, no such edge will be included.
 * fixed bug in positions of contains within scaffolds 
 * Fixed +1bp index bug in GFF file output 
 OTHER STUFF
 * Implemented gap estimation tool. With a narrowed down interval to gap in [-2*std_dev, mean+2*std_dev]
 * Fixed so that negative gaps are set to 0 in gap estimate.
 * Fixed so that scaffolds are written out properly in scaffolds.fa (no abutting contigs when we have negative gaps).
 * Outputs number of links between contigs to the GFF file (that gave rise to the edge in the graph).
 * -e parameter is now set independently set for each library e.g. -e 5 5 10 5 3
 * non-naive gap estimation is only active if nr of links is  >=  5, independent of what -e is set to.
 * Gap fragments added to GFF file
 * Scaffolds are printed out with 60 characters per line
 * More information is printed to stdout: all parameters specified for each library

V0.7

* Fixed various minor bugs.
* Changed way to create edges from BAM file, more paired-reads are now used.
* Removed some reads that are not unique by looking at tags specified by BWA (mapping quality > 10)
* Implemented coverage attribute for each contig.
* Implemented repeat removal based on the coverage information for a contig.
* Restructured code when passing function arguments between functions. Now, we have a new object caller Parameter that stores this to make the code more readable.
* Haplotype detector
* Removed required parameter -m (made optional). If not specified, it is calculated from the BAM file.
* Removed required parameter -s (made optional). If not specified, it is calculated from the BAM file.
* Removed required parameter -T (made optional). Set by program default -T = mean + 4*std_dev 
* Removed required parameter -t.
* Added optional parameter -k. Consider contigs larger than -k at each step. Default set to: mean + (std_dev/mean)*std_dev
* Added optional parameter -g.  Detect and treat haplotypes, default value of g is 1 , i.e. function is on. To switch off, set -g 0
* Added optional parameter -d Detect and remove duplicates,  default value of g is 1 , i.e. removing duplicates. To switch off, set -g 0. Removeing dupl. based on identical mapping positions for both reads in pair (this will give some false positives)
* Removed matplotlib dependency
* Removed scipy,numpy dependency by using closed formula approximation for erf(x)
* Print out scaffolds created for each pass in the algorithm

V1.0
* Various bug fixes
* Implemented scaffolding with smaller contigs by searching for coherent paths
* New score on edges in scaffold graph
* a beta version of parallelization of the small contains connection finder. specified by option -q 1 (default 0).


V1.0.1
* Fixed bug in libmetrics.py line, MaxObsDist was only called with 1 argument here when 2 args are required. Thanks Anthony Bretaudeau.
* Added a package for fixing split allele contigs before scaffolding in high heterozyosity diploid assemblies. (preliminary implementation)
* Added a python script to map reads to contigs (or a genome) with BWA. It outputs a sorted .bam and a .bai file, i.e. what is needed for BESST. The script requires that bwa is installed and in the path.

V1.0.2
* Better errorwarning handling with searate module "errorhandle" for throwing exceptions/warnings.
* Updated pysam dependency to pysam0.7
* Changed module for parsing arguments in python. From the deprecated "optparse" to "argparse".
* Not giving an exception if finding contigs present in BAM file but not in fasta file. Just throw a warning.

V1.0.3
* More information of scaffolding run given to "Statistics.txt".
* Added flag -plots for plotting various histograms such as coverage of library onto contigs, score distribution of links e.t.c.
* Fixed bug in score choosing function

V1.0.3.1
*Module plots has max number of observations 10000 due to time issues of plotting if large number of contigs or edges. 

V1.0.3.2
* Made number of iterations performed in breadth first search a parameter instead of fixed to 1000.
* Changed dispersity score of links. (explained in manual)
*fixed bug in plotting. 

V1.0.4
* Fixed bug in dispersity score (a KS test from scipy)
* No decision of path is made if scores are similar (breaks paths)
* Added dotplots of number of links to dispersity score for verification. 
* BESST now has dependency of scipy. Added this to setup script

V1.0.4.1
*Added gap adjustment for Francesco

V1.0.4.2
* Fixed bug in removing 0 score edges i G_prime. Now all edges in G are also removed in G_prime when searching for paths. This is an important fix.

V1.1
* Added LP solution to fix errors in orderings of small contigs when PE contamination in MP libraries are present. This is a big weakness in earlier versions (for fragmented assemblies scaffolded with MP libraries with considerable amount of PE contamination). 

* Gap size estimations in non linear scaffold regions are now estimated with a LP module toghether with GapEst. Since the theory of gapest (analytic derivation, hence the speed) only works for one gap between two scaffolds, all gaps were previously estimated one by one with GapEst. Now, in nonlinear regions, gaps between all pairs of scaffolds are estimated. These estimations are then given as input in the objective function for an linear programming instance. The onbejtive is to minimize the total distance of a current solution to the LP, given GapEst estimated ones. This will give more robust esitmations in case where short contigs and few links by making use of more information simultaneosly.

* Added a histogram of estimated gap distribution in cas -plots are specified.

* If a gap estiamtion is less than or equal to 0, a single lower case 'n' is output between contigs (changed from a single 'N'). This is changed to try to standardize the output of scaffolders (SSPACE output 'n'). Also after discussion with QUAST (assembly evaluating software) author Alexey to be able to parse scaffold output consistently.

* pulp (Linear programming module for python) is added as required packages

* added parameter --separate_repeats to separate potential repeats (inferred by BESST) into a file "repeats.fa". This was default output for BESST in earlier versions. Now, default output is a single file in each scaffolding step Scaffolds_passX.fa.

* added parameter -filter_contigs <int> . This parameter with remove att contigs smaller than <int> from all scaffolding (and scaffold output). 

* added parameter --no_score. If specified, statistical scoring is not used to scaffold. BESST instead relies soley on the new LP module to search for paths between contigs. The effect of this is not thouroughly tested so far but preliminary results hint that it is slower but gives slightly better results.

V1.2
* BESST can now parse alignments of both forward reverse and reverse forward orientation. To specify the orientation of the alignments, a parameter --orientation is added. --orientation takes a string 'rf' or 'fr' for each library that is povided with the -f option to BESST. If --orientation is not specified, BESST throws a warning that orientations are not specified and proceeds by assuming that the alignemts are done with fr orientation irregardless of library (as is done in previous versions). This is done not to break old pipelines.

* Added automatic check for which scaffolding approach that are the most sound/beneficial given the library and the fragmentation level of the assembly (statistical scoring or pathsearching immediately).

* relaxed dependency criterion on pysam. Now, all versions >=0.7 works (bug when installing with pysam v0.7 reported by Shaun Jackman).

* Some minor bugs and fixes implemented by Rayan Chikhi, Jan van Haarst and Mattias Fr√•nberg.

V1.3

* MAJOR IMPROVEMENTS IN RUNTIME AND MEMORY CONSUMPTION. It is strongly encouraged to update to this version (or later) for bigger assemblies.

* Removed dependency on PuLP. LP is now solved with module from https://github.com/pv/scipy-work/blob/11c7f50e8b90edb1e74e5f0c6710717b2af6aed6/scipy/optimize/_lp.py  

* Added paramenters --max_extensions, --score_cutoff. Good to set if millons of contigs in assembly (see docs/manual.md). 

* Added merging of overlapping k-mers in contigs for final output


